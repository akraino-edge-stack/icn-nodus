// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nfn.proto

package nfn

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubscribeContext struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeContext) Reset()         { *m = SubscribeContext{} }
func (m *SubscribeContext) String() string { return proto.CompactTextString(m) }
func (*SubscribeContext) ProtoMessage()    {}
func (*SubscribeContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b809db4a7814953, []int{0}
}
func (m *SubscribeContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeContext.Merge(m, src)
}
func (m *SubscribeContext) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeContext) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeContext.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeContext proto.InternalMessageInfo

func (m *SubscribeContext) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type Notification struct {
	CniType string `protobuf:"bytes,1,opt,name=cni_type,json=cniType,proto3" json:"cni_type,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*Notification_InSync
	//	*Notification_ProviderNwCreate
	//	*Notification_ProviderNwRemove
	//	*Notification_ContainterRtInsert
	//	*Notification_ContainterRtRemove
	//	*Notification_PodAddNetwork
	//	*Notification_PodDelNetwork
	Payload              isNotification_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Notification) Reset()         { *m = Notification{} }
func (m *Notification) String() string { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()    {}
func (*Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b809db4a7814953, []int{1}
}
func (m *Notification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notification.Merge(m, src)
}
func (m *Notification) XXX_Size() int {
	return m.Size()
}
func (m *Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_Notification proto.InternalMessageInfo

type isNotification_Payload interface {
	isNotification_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Notification_InSync struct {
	InSync *InSync `protobuf:"bytes,2,opt,name=in_sync,json=inSync,proto3,oneof" json:"in_sync,omitempty"`
}
type Notification_ProviderNwCreate struct {
	ProviderNwCreate *ProviderNetworkCreate `protobuf:"bytes,3,opt,name=provider_nw_create,json=providerNwCreate,proto3,oneof" json:"provider_nw_create,omitempty"`
}
type Notification_ProviderNwRemove struct {
	ProviderNwRemove *ProviderNetworkRemove `protobuf:"bytes,4,opt,name=provider_nw_remove,json=providerNwRemove,proto3,oneof" json:"provider_nw_remove,omitempty"`
}
type Notification_ContainterRtInsert struct {
	ContainterRtInsert *ContainerRouteInsert `protobuf:"bytes,5,opt,name=containter_rt_insert,json=containterRtInsert,proto3,oneof" json:"containter_rt_insert,omitempty"`
}
type Notification_ContainterRtRemove struct {
	ContainterRtRemove *ContainerRouteRemove `protobuf:"bytes,6,opt,name=containter_rt_remove,json=containterRtRemove,proto3,oneof" json:"containter_rt_remove,omitempty"`
}
type Notification_PodAddNetwork struct {
	PodAddNetwork *PodAddNetwork `protobuf:"bytes,7,opt,name=pod_add_network,json=podAddNetwork,proto3,oneof" json:"pod_add_network,omitempty"`
}
type Notification_PodDelNetwork struct {
	PodDelNetwork *PodDelNetwork `protobuf:"bytes,8,opt,name=pod_del_network,json=podDelNetwork,proto3,oneof" json:"pod_del_network,omitempty"`
}

func (*Notification_InSync) isNotification_Payload()             {}
func (*Notification_ProviderNwCreate) isNotification_Payload()   {}
func (*Notification_ProviderNwRemove) isNotification_Payload()   {}
func (*Notification_ContainterRtInsert) isNotification_Payload() {}
func (*Notification_ContainterRtRemove) isNotification_Payload() {}
func (*Notification_PodAddNetwork) isNotification_Payload()      {}
func (*Notification_PodDelNetwork) isNotification_Payload()      {}

func (m *Notification) GetPayload() isNotification_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Notification) GetCniType() string {
	if m != nil {
		return m.CniType
	}
	return ""
}

func (m *Notification) GetInSync() *InSync {
	if x, ok := m.GetPayload().(*Notification_InSync); ok {
		return x.InSync
	}
	return nil
}

func (m *Notification) GetProviderNwCreate() *ProviderNetworkCreate {
	if x, ok := m.GetPayload().(*Notification_ProviderNwCreate); ok {
		return x.ProviderNwCreate
	}
	return nil
}

func (m *Notification) GetProviderNwRemove() *ProviderNetworkRemove {
	if x, ok := m.GetPayload().(*Notification_ProviderNwRemove); ok {
		return x.ProviderNwRemove
	}
	return nil
}

func (m *Notification) GetContainterRtInsert() *ContainerRouteInsert {
	if x, ok := m.GetPayload().(*Notification_ContainterRtInsert); ok {
		return x.ContainterRtInsert
	}
	return nil
}

func (m *Notification) GetContainterRtRemove() *ContainerRouteRemove {
	if x, ok := m.GetPayload().(*Notification_ContainterRtRemove); ok {
		return x.ContainterRtRemove
	}
	return nil
}

func (m *Notification) GetPodAddNetwork() *PodAddNetwork {
	if x, ok := m.GetPayload().(*Notification_PodAddNetwork); ok {
		return x.PodAddNetwork
	}
	return nil
}

func (m *Notification) GetPodDelNetwork() *PodDelNetwork {
	if x, ok := m.GetPayload().(*Notification_PodDelNetwork); ok {
		return x.PodDelNetwork
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Notification) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Notification_InSync)(nil),
		(*Notification_ProviderNwCreate)(nil),
		(*Notification_ProviderNwRemove)(nil),
		(*Notification_ContainterRtInsert)(nil),
		(*Notification_ContainterRtRemove)(nil),
		(*Notification_PodAddNetwork)(nil),
		(*Notification_PodDelNetwork)(nil),
	}
}

type ProviderNetworkCreate struct {
	ProviderNwName       string      `protobuf:"bytes,1,opt,name=provider_nw_name,json=providerNwName,proto3" json:"provider_nw_name,omitempty"`
	Vlan                 *VlanInfo   `protobuf:"bytes,2,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Direct               *DirectInfo `protobuf:"bytes,3,opt,name=direct,proto3" json:"direct,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ProviderNetworkCreate) Reset()         { *m = ProviderNetworkCreate{} }
func (m *ProviderNetworkCreate) String() string { return proto.CompactTextString(m) }
func (*ProviderNetworkCreate) ProtoMessage()    {}
func (*ProviderNetworkCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b809db4a7814953, []int{2}
}
func (m *ProviderNetworkCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderNetworkCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderNetworkCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderNetworkCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderNetworkCreate.Merge(m, src)
}
func (m *ProviderNetworkCreate) XXX_Size() int {
	return m.Size()
}
func (m *ProviderNetworkCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderNetworkCreate.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderNetworkCreate proto.InternalMessageInfo

func (m *ProviderNetworkCreate) GetProviderNwName() string {
	if m != nil {
		return m.ProviderNwName
	}
	return ""
}

func (m *ProviderNetworkCreate) GetVlan() *VlanInfo {
	if m != nil {
		return m.Vlan
	}
	return nil
}

func (m *ProviderNetworkCreate) GetDirect() *DirectInfo {
	if m != nil {
		return m.Direct
	}
	return nil
}

type ProviderNetworkRemove struct {
	ProviderNwName       string   `protobuf:"bytes,1,opt,name=provider_nw_name,json=providerNwName,proto3" json:"provider_nw_name,omitempty"`
	VlanLogicalIntf      string   `protobuf:"bytes,2,opt,name=vlan_logical_intf,json=vlanLogicalIntf,proto3" json:"vlan_logical_intf,omitempty"`
	DirectProviderIntf   string   `protobuf:"bytes,3,opt,name=direct_provider_intf,json=directProviderIntf,proto3" json:"direct_provider_intf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProviderNetworkRemove) Reset()         { *m = ProviderNetworkRemove{} }
func (m *ProviderNetworkRemove) String() string { return proto.CompactTextString(m) }
func (*ProviderNetworkRemove) ProtoMessage()    {}
func (*ProviderNetworkRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b809db4a7814953, []int{3}
}
func (m *ProviderNetworkRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderNetworkRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderNetworkRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderNetworkRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderNetworkRemove.Merge(m, src)
}
func (m *ProviderNetworkRemove) XXX_Size() int {
	return m.Size()
}
func (m *ProviderNetworkRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderNetworkRemove.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderNetworkRemove proto.InternalMessageInfo

func (m *ProviderNetworkRemove) GetProviderNwName() string {
	if m != nil {
		return m.ProviderNwName
	}
	return ""
}

func (m *ProviderNetworkRemove) GetVlanLogicalIntf() string {
	if m != nil {
		return m.VlanLogicalIntf
	}
	return ""
}

func (m *ProviderNetworkRemove) GetDirectProviderIntf() string {
	if m != nil {
		return m.DirectProviderIntf
	}
	return ""
}

type VlanInfo struct {
	VlanId               string   `protobuf:"bytes,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	ProviderIntf         string   `protobuf:"bytes,2,opt,name=provider_intf,json=providerIntf,proto3" json:"provider_intf,omitempty"`
	LogicalIntf          string   `protobuf:"bytes,3,opt,name=logical_intf,json=logicalIntf,proto3" json:"logical_intf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VlanInfo) Reset()         { *m = VlanInfo{} }
func (m *VlanInfo) String() string { return proto.CompactTextString(m) }
func (*VlanInfo) ProtoMessage()    {}
func (*VlanInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b809db4a7814953, []int{4}
}
func (m *VlanInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VlanInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VlanInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VlanInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlanInfo.Merge(m, src)
}
func (m *VlanInfo) XXX_Size() int {
	return m.Size()
}
func (m *VlanInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VlanInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VlanInfo proto.InternalMessageInfo

func (m *VlanInfo) GetVlanId() string {
	if m != nil {
		return m.VlanId
	}
	return ""
}

func (m *VlanInfo) GetProviderIntf() string {
	if m != nil {
		return m.ProviderIntf
	}
	return ""
}

func (m *VlanInfo) GetLogicalIntf() string {
	if m != nil {
		return m.LogicalIntf
	}
	return ""
}

type DirectInfo struct {
	ProviderIntf         string   `protobuf:"bytes,1,opt,name=provider_intf,json=providerIntf,proto3" json:"provider_intf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DirectInfo) Reset()         { *m = DirectInfo{} }
func (m *DirectInfo) String() string { return proto.CompactTextString(m) }
func (*DirectInfo) ProtoMessage()    {}
func (*DirectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b809db4a7814953, []int{5}
}
func (m *DirectInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectInfo.Merge(m, src)
}
func (m *DirectInfo) XXX_Size() int {
	return m.Size()
}
func (m *DirectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DirectInfo proto.InternalMessageInfo

func (m *DirectInfo) GetProviderIntf() string {
	if m != nil {
		return m.ProviderIntf
	}
	return ""
}

type RouteData struct {
	Dst                  string   `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	Gw                   string   `protobuf:"bytes,3,opt,name=gw,proto3" json:"gw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteData) Reset()         { *m = RouteData{} }
func (m *RouteData) String() string { return proto.CompactTextString(m) }
func (*RouteData) ProtoMessage()    {}
func (*RouteData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b809db4a7814953, []int{6}
}
func (m *RouteData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteData.Merge(m, src)
}
func (m *RouteData) XXX_Size() int {
	return m.Size()
}
func (m *RouteData) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteData.DiscardUnknown(m)
}

var xxx_messageInfo_RouteData proto.InternalMessageInfo

func (m *RouteData) GetDst() string {
	if m != nil {
		return m.Dst
	}
	return ""
}

func (m *RouteData) GetGw() string {
	if m != nil {
		return m.Gw
	}
	return ""
}

type ContainerRouteInsert struct {
	ContainerId          string       `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Route                []*RouteData `protobuf:"bytes,2,rep,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ContainerRouteInsert) Reset()         { *m = ContainerRouteInsert{} }
func (m *ContainerRouteInsert) String() string { return proto.CompactTextString(m) }
func (*ContainerRouteInsert) ProtoMessage()    {}
func (*ContainerRouteInsert) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b809db4a7814953, []int{7}
}
func (m *ContainerRouteInsert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerRouteInsert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerRouteInsert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerRouteInsert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerRouteInsert.Merge(m, src)
}
func (m *ContainerRouteInsert) XXX_Size() int {
	return m.Size()
}
func (m *ContainerRouteInsert) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerRouteInsert.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerRouteInsert proto.InternalMessageInfo

func (m *ContainerRouteInsert) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *ContainerRouteInsert) GetRoute() []*RouteData {
	if m != nil {
		return m.Route
	}
	return nil
}

type ContainerRouteRemove struct {
	ContainerId          string       `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Route                []*RouteData `protobuf:"bytes,2,rep,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ContainerRouteRemove) Reset()         { *m = ContainerRouteRemove{} }
func (m *ContainerRouteRemove) String() string { return proto.CompactTextString(m) }
func (*ContainerRouteRemove) ProtoMessage()    {}
func (*ContainerRouteRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b809db4a7814953, []int{8}
}
func (m *ContainerRouteRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerRouteRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerRouteRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerRouteRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerRouteRemove.Merge(m, src)
}
func (m *ContainerRouteRemove) XXX_Size() int {
	return m.Size()
}
func (m *ContainerRouteRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerRouteRemove.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerRouteRemove proto.InternalMessageInfo

func (m *ContainerRouteRemove) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *ContainerRouteRemove) GetRoute() []*RouteData {
	if m != nil {
		return m.Route
	}
	return nil
}

type PodInfo struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodInfo) Reset()         { *m = PodInfo{} }
func (m *PodInfo) String() string { return proto.CompactTextString(m) }
func (*PodInfo) ProtoMessage()    {}
func (*PodInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b809db4a7814953, []int{9}
}
func (m *PodInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodInfo.Merge(m, src)
}
func (m *PodInfo) XXX_Size() int {
	return m.Size()
}
func (m *PodInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PodInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PodInfo proto.InternalMessageInfo

func (m *PodInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type NetConf struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetConf) Reset()         { *m = NetConf{} }
func (m *NetConf) String() string { return proto.CompactTextString(m) }
func (*NetConf) ProtoMessage()    {}
func (*NetConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b809db4a7814953, []int{10}
}
func (m *NetConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetConf.Merge(m, src)
}
func (m *NetConf) XXX_Size() int {
	return m.Size()
}
func (m *NetConf) XXX_DiscardUnknown() {
	xxx_messageInfo_NetConf.DiscardUnknown(m)
}

var xxx_messageInfo_NetConf proto.InternalMessageInfo

func (m *NetConf) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type PodAddNetwork struct {
	ContainerId          string       `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Pod                  *PodInfo     `protobuf:"bytes,2,opt,name=pod,proto3" json:"pod,omitempty"`
	Net                  *NetConf     `protobuf:"bytes,3,opt,name=net,proto3" json:"net,omitempty"`
	Route                []*RouteData `protobuf:"bytes,4,rep,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PodAddNetwork) Reset()         { *m = PodAddNetwork{} }
func (m *PodAddNetwork) String() string { return proto.CompactTextString(m) }
func (*PodAddNetwork) ProtoMessage()    {}
func (*PodAddNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b809db4a7814953, []int{11}
}
func (m *PodAddNetwork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodAddNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodAddNetwork.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodAddNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodAddNetwork.Merge(m, src)
}
func (m *PodAddNetwork) XXX_Size() int {
	return m.Size()
}
func (m *PodAddNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_PodAddNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_PodAddNetwork proto.InternalMessageInfo

func (m *PodAddNetwork) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *PodAddNetwork) GetPod() *PodInfo {
	if m != nil {
		return m.Pod
	}
	return nil
}

func (m *PodAddNetwork) GetNet() *NetConf {
	if m != nil {
		return m.Net
	}
	return nil
}

func (m *PodAddNetwork) GetRoute() []*RouteData {
	if m != nil {
		return m.Route
	}
	return nil
}

type PodDelNetwork struct {
	ContainerId          string       `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Pod                  *PodInfo     `protobuf:"bytes,2,opt,name=pod,proto3" json:"pod,omitempty"`
	Net                  *NetConf     `protobuf:"bytes,3,opt,name=net,proto3" json:"net,omitempty"`
	Route                []*RouteData `protobuf:"bytes,4,rep,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PodDelNetwork) Reset()         { *m = PodDelNetwork{} }
func (m *PodDelNetwork) String() string { return proto.CompactTextString(m) }
func (*PodDelNetwork) ProtoMessage()    {}
func (*PodDelNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b809db4a7814953, []int{12}
}
func (m *PodDelNetwork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodDelNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodDelNetwork.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodDelNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodDelNetwork.Merge(m, src)
}
func (m *PodDelNetwork) XXX_Size() int {
	return m.Size()
}
func (m *PodDelNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_PodDelNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_PodDelNetwork proto.InternalMessageInfo

func (m *PodDelNetwork) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *PodDelNetwork) GetPod() *PodInfo {
	if m != nil {
		return m.Pod
	}
	return nil
}

func (m *PodDelNetwork) GetNet() *NetConf {
	if m != nil {
		return m.Net
	}
	return nil
}

func (m *PodDelNetwork) GetRoute() []*RouteData {
	if m != nil {
		return m.Route
	}
	return nil
}

type InSync struct {
	NodeIntfIpAddress    string   `protobuf:"bytes,1,opt,name=node_intf_ip_address,json=nodeIntfIpAddress,proto3" json:"node_intf_ip_address,omitempty"`
	NodeIntfMacAddress   string   `protobuf:"bytes,2,opt,name=node_intf_mac_address,json=nodeIntfMacAddress,proto3" json:"node_intf_mac_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InSync) Reset()         { *m = InSync{} }
func (m *InSync) String() string { return proto.CompactTextString(m) }
func (*InSync) ProtoMessage()    {}
func (*InSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b809db4a7814953, []int{13}
}
func (m *InSync) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InSync.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InSync.Merge(m, src)
}
func (m *InSync) XXX_Size() int {
	return m.Size()
}
func (m *InSync) XXX_DiscardUnknown() {
	xxx_messageInfo_InSync.DiscardUnknown(m)
}

var xxx_messageInfo_InSync proto.InternalMessageInfo

func (m *InSync) GetNodeIntfIpAddress() string {
	if m != nil {
		return m.NodeIntfIpAddress
	}
	return ""
}

func (m *InSync) GetNodeIntfMacAddress() string {
	if m != nil {
		return m.NodeIntfMacAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*SubscribeContext)(nil), "SubscribeContext")
	proto.RegisterType((*Notification)(nil), "Notification")
	proto.RegisterType((*ProviderNetworkCreate)(nil), "ProviderNetworkCreate")
	proto.RegisterType((*ProviderNetworkRemove)(nil), "ProviderNetworkRemove")
	proto.RegisterType((*VlanInfo)(nil), "VlanInfo")
	proto.RegisterType((*DirectInfo)(nil), "DirectInfo")
	proto.RegisterType((*RouteData)(nil), "RouteData")
	proto.RegisterType((*ContainerRouteInsert)(nil), "ContainerRouteInsert")
	proto.RegisterType((*ContainerRouteRemove)(nil), "ContainerRouteRemove")
	proto.RegisterType((*PodInfo)(nil), "PodInfo")
	proto.RegisterType((*NetConf)(nil), "NetConf")
	proto.RegisterType((*PodAddNetwork)(nil), "PodAddNetwork")
	proto.RegisterType((*PodDelNetwork)(nil), "PodDelNetwork")
	proto.RegisterType((*InSync)(nil), "InSync")
}

func init() { proto.RegisterFile("nfn.proto", fileDescriptor_5b809db4a7814953) }

var fileDescriptor_5b809db4a7814953 = []byte{
	// 765 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xcf, 0x6e, 0xdb, 0x36,
	0x1c, 0xb6, 0x6c, 0xc7, 0xb2, 0x7e, 0x8e, 0x13, 0x87, 0x70, 0x36, 0x2f, 0x5b, 0x0c, 0x4f, 0xb9,
	0x18, 0x03, 0xa6, 0xfc, 0xd9, 0x65, 0xc0, 0x76, 0x49, 0x1c, 0x0c, 0x16, 0xb0, 0x19, 0x81, 0x32,
	0xf4, 0xd2, 0x83, 0xc0, 0x88, 0x74, 0x40, 0x44, 0x26, 0x05, 0x99, 0x89, 0xeb, 0x07, 0xe8, 0xad,
	0x0f, 0xd0, 0x5b, 0x5f, 0xa7, 0xc7, 0x3e, 0x42, 0x91, 0xbe, 0x41, 0x9f, 0xa0, 0x20, 0x45, 0x59,
	0x76, 0xec, 0x02, 0x39, 0x14, 0xe8, 0x8d, 0xfe, 0x3e, 0x7e, 0xdf, 0xef, 0x23, 0xf9, 0xb3, 0x7e,
	0xe0, 0xf0, 0x31, 0xf7, 0x92, 0x54, 0x48, 0xe1, 0x1e, 0x43, 0xeb, 0xfa, 0xfe, 0x66, 0x1a, 0xa5,
	0xec, 0x86, 0x0e, 0x04, 0x97, 0xf4, 0x95, 0x44, 0x3f, 0x83, 0xc3, 0x05, 0xa1, 0x21, 0xc7, 0x13,
	0xda, 0xb1, 0x7a, 0x56, 0xdf, 0x09, 0xea, 0x0a, 0x18, 0xe1, 0x09, 0x75, 0x3f, 0x57, 0x60, 0x7b,
	0x24, 0x24, 0x1b, 0xb3, 0x08, 0x4b, 0x26, 0x38, 0xfa, 0x09, 0xea, 0x11, 0x67, 0xa1, 0x9c, 0x27,
	0xf9, 0x66, 0x3b, 0xe2, 0xec, 0xff, 0x79, 0x42, 0x91, 0x0b, 0x36, 0xe3, 0xe1, 0x74, 0xce, 0xa3,
	0x4e, 0xb9, 0x67, 0xf5, 0x1b, 0x67, 0xb6, 0xe7, 0xf3, 0xeb, 0x39, 0x8f, 0x86, 0xa5, 0xa0, 0xc6,
	0xf4, 0x0a, 0xfd, 0x03, 0x28, 0x49, 0xc5, 0x03, 0x23, 0x34, 0x0d, 0xf9, 0x2c, 0x8c, 0x52, 0x8a,
	0x25, 0xed, 0x54, 0xf4, 0xf6, 0x1f, 0xbc, 0x2b, 0x43, 0x8d, 0xa8, 0x9c, 0x89, 0xf4, 0x6e, 0xa0,
	0xd9, 0x61, 0x29, 0x68, 0xe5, 0x9a, 0xd1, 0x2c, 0xc3, 0x9e, 0xfa, 0xa4, 0x74, 0x22, 0x1e, 0x68,
	0xa7, 0xba, 0xd9, 0x27, 0xd0, 0xec, 0xaa, 0x4f, 0x86, 0x21, 0x1f, 0xda, 0x91, 0xe0, 0x12, 0x33,
	0x2e, 0x69, 0x1a, 0xa6, 0x32, 0x64, 0x7c, 0x4a, 0x53, 0xd9, 0xd9, 0xd2, 0x4e, 0xfb, 0xde, 0x20,
	0x23, 0x69, 0x1a, 0x88, 0x7b, 0x49, 0x7d, 0x4d, 0x0e, 0x4b, 0x01, 0x2a, 0x44, 0x81, 0xcc, 0xd0,
	0x75, 0x2b, 0x13, 0xaa, 0xb6, 0xd1, 0x6a, 0x91, 0x69, 0xc5, 0xca, 0xa4, 0xfa, 0x13, 0x76, 0x13,
	0x41, 0x42, 0x4c, 0x48, 0xc8, 0xb3, 0x23, 0x74, 0x6c, 0xed, 0xb2, 0xe3, 0x5d, 0x09, 0x72, 0x4e,
	0x88, 0x39, 0xd8, 0xb0, 0x14, 0x34, 0x93, 0x65, 0x20, 0x57, 0x12, 0x1a, 0x2f, 0x94, 0xf5, 0x42,
	0x79, 0x49, 0xe3, 0x55, 0x65, 0x01, 0x5c, 0x38, 0x60, 0x27, 0x78, 0x1e, 0x0b, 0x4c, 0xdc, 0xd7,
	0x16, 0xec, 0x6f, 0x7c, 0x0a, 0xd4, 0x87, 0xd6, 0xf2, 0xb5, 0x2f, 0xb5, 0xcc, 0x4e, 0x71, 0xb5,
	0xaa, 0x71, 0xd0, 0x21, 0x54, 0x1f, 0x62, 0xcc, 0x4d, 0x27, 0x38, 0xde, 0x8b, 0x18, 0x73, 0x9f,
	0x8f, 0x45, 0xa0, 0x61, 0x74, 0x04, 0x35, 0xc2, 0x52, 0x1a, 0x49, 0xf3, 0xf6, 0x0d, 0xef, 0x52,
	0xff, 0xd4, 0x5b, 0x0c, 0xe5, 0xbe, 0x5b, 0xcf, 0x61, 0x2e, 0xe8, 0xf9, 0x39, 0x7e, 0x83, 0x3d,
	0x55, 0x30, 0x8c, 0xc5, 0x2d, 0x8b, 0x70, 0x1c, 0x32, 0x2e, 0xc7, 0x3a, 0x94, 0x13, 0xec, 0x2a,
	0xe2, 0xdf, 0x0c, 0xf7, 0xb9, 0x1c, 0xa3, 0x13, 0x68, 0x67, 0x95, 0xc3, 0x85, 0xb9, 0xde, 0x5e,
	0xd1, 0xdb, 0x51, 0xc6, 0xe5, 0x81, 0x94, 0xc2, 0xbd, 0x83, 0x7a, 0x7e, 0x30, 0xf4, 0x23, 0xd8,
	0xba, 0x12, 0x23, 0x26, 0x4a, 0x4d, 0xfd, 0xf4, 0x09, 0x3a, 0x82, 0xe6, 0xaa, 0x5f, 0x56, 0x7e,
	0x3b, 0x59, 0x72, 0x42, 0xbf, 0xc2, 0xf6, 0x4a, 0xc4, 0xac, 0x66, 0x23, 0x2e, 0xe2, 0xb9, 0xa7,
	0x00, 0xc5, 0x25, 0xad, 0xbb, 0x5a, 0xeb, 0xae, 0xee, 0xef, 0xe0, 0xe8, 0x6e, 0xbb, 0xc4, 0x12,
	0xa3, 0x16, 0x54, 0xc8, 0x54, 0x9a, 0xea, 0x6a, 0x89, 0x76, 0xa0, 0x7c, 0x3b, 0x33, 0xa5, 0xca,
	0xb7, 0x33, 0xf7, 0x25, 0xb4, 0x37, 0x35, 0xbc, 0x0a, 0x17, 0xe5, 0x78, 0x71, 0xbe, 0xc6, 0x02,
	0xf3, 0x09, 0xea, 0xc1, 0x56, 0xaa, 0x14, 0x9d, 0x72, 0xaf, 0xd2, 0x6f, 0x9c, 0x81, 0xb7, 0xa8,
	0x1b, 0x64, 0xc4, 0xba, 0xb9, 0x79, 0xcb, 0x6f, 0x62, 0xfe, 0x17, 0xd8, 0x57, 0x82, 0xe8, 0x8b,
	0xf9, 0x05, 0x1c, 0xd5, 0x0f, 0xd3, 0x04, 0x47, 0x79, 0x53, 0x14, 0x00, 0x42, 0x50, 0xd5, 0xdd,
	0x92, 0xdd, 0x82, 0x5e, 0xbb, 0x87, 0x60, 0x8f, 0xa8, 0x1c, 0x08, 0x3e, 0x56, 0x34, 0xc1, 0x12,
	0x1b, 0x9d, 0x5e, 0xbb, 0x6f, 0x2c, 0x68, 0xae, 0xfc, 0xed, 0x9e, 0x13, 0xf9, 0x00, 0x2a, 0x89,
	0x20, 0xa6, 0xfd, 0xeb, 0x9e, 0x09, 0x17, 0x28, 0x50, 0x71, 0x9c, 0xe6, 0x9d, 0x5f, 0xf7, 0x4c,
	0xed, 0x40, 0x81, 0xc5, 0x51, 0xab, 0x5f, 0x3b, 0xaa, 0x89, 0x53, 0xfc, 0x75, 0xbf, 0x6f, 0x9c,
	0x18, 0x6a, 0xd9, 0x57, 0x1e, 0x1d, 0x43, 0x5b, 0x0f, 0x12, 0xd5, 0x8d, 0x21, 0x4b, 0xd4, 0xe7,
	0x2b, 0xa5, 0xd3, 0xa9, 0x89, 0xb3, 0xa7, 0x38, 0xd5, 0x94, 0x7e, 0x72, 0x9e, 0x11, 0xe8, 0x14,
	0xf6, 0x0b, 0xc1, 0x04, 0x47, 0x0b, 0x45, 0xf6, 0x38, 0x28, 0x57, 0xfc, 0x87, 0x23, 0x23, 0x39,
	0xfb, 0x5b, 0x4f, 0x33, 0x3d, 0x91, 0xe6, 0xe8, 0x18, 0x9c, 0xc5, 0x34, 0x43, 0x7b, 0xde, 0xd3,
	0xc9, 0x76, 0xd0, 0xf4, 0x96, 0x47, 0xd7, 0x89, 0x75, 0xd1, 0x7a, 0xff, 0xd8, 0xb5, 0x3e, 0x3c,
	0x76, 0xad, 0x8f, 0x8f, 0x5d, 0xeb, 0xed, 0xa7, 0x6e, 0xe9, 0xa6, 0xa6, 0xe7, 0xe2, 0x1f, 0x5f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x54, 0x34, 0xed, 0x95, 0x24, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NfnNotifyClient is the client API for NfnNotify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NfnNotifyClient interface {
	Subscribe(ctx context.Context, in *SubscribeContext, opts ...grpc.CallOption) (NfnNotify_SubscribeClient, error)
}

type nfnNotifyClient struct {
	cc *grpc.ClientConn
}

func NewNfnNotifyClient(cc *grpc.ClientConn) NfnNotifyClient {
	return &nfnNotifyClient{cc}
}

func (c *nfnNotifyClient) Subscribe(ctx context.Context, in *SubscribeContext, opts ...grpc.CallOption) (NfnNotify_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NfnNotify_serviceDesc.Streams[0], "/nfnNotify/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &nfnNotifySubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NfnNotify_SubscribeClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type nfnNotifySubscribeClient struct {
	grpc.ClientStream
}

func (x *nfnNotifySubscribeClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NfnNotifyServer is the server API for NfnNotify service.
type NfnNotifyServer interface {
	Subscribe(*SubscribeContext, NfnNotify_SubscribeServer) error
}

// UnimplementedNfnNotifyServer can be embedded to have forward compatible implementations.
type UnimplementedNfnNotifyServer struct {
}

func (*UnimplementedNfnNotifyServer) Subscribe(req *SubscribeContext, srv NfnNotify_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterNfnNotifyServer(s *grpc.Server, srv NfnNotifyServer) {
	s.RegisterService(&_NfnNotify_serviceDesc, srv)
}

func _NfnNotify_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeContext)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NfnNotifyServer).Subscribe(m, &nfnNotifySubscribeServer{stream})
}

type NfnNotify_SubscribeServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type nfnNotifySubscribeServer struct {
	grpc.ServerStream
}

func (x *nfnNotifySubscribeServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

var _NfnNotify_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nfnNotify",
	HandlerType: (*NfnNotifyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _NfnNotify_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nfn.proto",
}

func (m *SubscribeContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Notification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.CniType) > 0 {
		i -= len(m.CniType)
		copy(dAtA[i:], m.CniType)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.CniType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Notification_InSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notification_InSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InSync != nil {
		{
			size, err := m.InSync.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNfn(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Notification_ProviderNwCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notification_ProviderNwCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProviderNwCreate != nil {
		{
			size, err := m.ProviderNwCreate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNfn(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Notification_ProviderNwRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notification_ProviderNwRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProviderNwRemove != nil {
		{
			size, err := m.ProviderNwRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNfn(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Notification_ContainterRtInsert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notification_ContainterRtInsert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ContainterRtInsert != nil {
		{
			size, err := m.ContainterRtInsert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNfn(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Notification_ContainterRtRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notification_ContainterRtRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ContainterRtRemove != nil {
		{
			size, err := m.ContainterRtRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNfn(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Notification_PodAddNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notification_PodAddNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PodAddNetwork != nil {
		{
			size, err := m.PodAddNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNfn(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Notification_PodDelNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notification_PodDelNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PodDelNetwork != nil {
		{
			size, err := m.PodDelNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNfn(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ProviderNetworkCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderNetworkCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderNetworkCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Direct != nil {
		{
			size, err := m.Direct.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNfn(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Vlan != nil {
		{
			size, err := m.Vlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNfn(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProviderNwName) > 0 {
		i -= len(m.ProviderNwName)
		copy(dAtA[i:], m.ProviderNwName)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.ProviderNwName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProviderNetworkRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderNetworkRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderNetworkRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DirectProviderIntf) > 0 {
		i -= len(m.DirectProviderIntf)
		copy(dAtA[i:], m.DirectProviderIntf)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.DirectProviderIntf)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VlanLogicalIntf) > 0 {
		i -= len(m.VlanLogicalIntf)
		copy(dAtA[i:], m.VlanLogicalIntf)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.VlanLogicalIntf)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProviderNwName) > 0 {
		i -= len(m.ProviderNwName)
		copy(dAtA[i:], m.ProviderNwName)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.ProviderNwName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VlanInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VlanInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LogicalIntf) > 0 {
		i -= len(m.LogicalIntf)
		copy(dAtA[i:], m.LogicalIntf)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.LogicalIntf)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProviderIntf) > 0 {
		i -= len(m.ProviderIntf)
		copy(dAtA[i:], m.ProviderIntf)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.ProviderIntf)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VlanId) > 0 {
		i -= len(m.VlanId)
		copy(dAtA[i:], m.VlanId)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.VlanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProviderIntf) > 0 {
		i -= len(m.ProviderIntf)
		copy(dAtA[i:], m.ProviderIntf)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.ProviderIntf)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RouteData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Gw) > 0 {
		i -= len(m.Gw)
		copy(dAtA[i:], m.Gw)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.Gw)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Dst) > 0 {
		i -= len(m.Dst)
		copy(dAtA[i:], m.Dst)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.Dst)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ContainerRouteInsert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerRouteInsert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerRouteInsert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Route) > 0 {
		for iNdEx := len(m.Route) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Route[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNfn(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerRouteRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerRouteRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerRouteRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Route) > 0 {
		for iNdEx := len(m.Route) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Route[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNfn(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodAddNetwork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodAddNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodAddNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Route) > 0 {
		for iNdEx := len(m.Route) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Route[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNfn(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Net != nil {
		{
			size, err := m.Net.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNfn(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pod != nil {
		{
			size, err := m.Pod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNfn(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodDelNetwork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodDelNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodDelNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Route) > 0 {
		for iNdEx := len(m.Route) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Route[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNfn(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Net != nil {
		{
			size, err := m.Net.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNfn(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pod != nil {
		{
			size, err := m.Pod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNfn(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InSync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeIntfMacAddress) > 0 {
		i -= len(m.NodeIntfMacAddress)
		copy(dAtA[i:], m.NodeIntfMacAddress)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.NodeIntfMacAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeIntfIpAddress) > 0 {
		i -= len(m.NodeIntfIpAddress)
		copy(dAtA[i:], m.NodeIntfIpAddress)
		i = encodeVarintNfn(dAtA, i, uint64(len(m.NodeIntfIpAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNfn(dAtA []byte, offset int, v uint64) int {
	offset -= sovNfn(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubscribeContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Notification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CniType)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Notification_InSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InSync != nil {
		l = m.InSync.Size()
		n += 1 + l + sovNfn(uint64(l))
	}
	return n
}
func (m *Notification_ProviderNwCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProviderNwCreate != nil {
		l = m.ProviderNwCreate.Size()
		n += 1 + l + sovNfn(uint64(l))
	}
	return n
}
func (m *Notification_ProviderNwRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProviderNwRemove != nil {
		l = m.ProviderNwRemove.Size()
		n += 1 + l + sovNfn(uint64(l))
	}
	return n
}
func (m *Notification_ContainterRtInsert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContainterRtInsert != nil {
		l = m.ContainterRtInsert.Size()
		n += 1 + l + sovNfn(uint64(l))
	}
	return n
}
func (m *Notification_ContainterRtRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContainterRtRemove != nil {
		l = m.ContainterRtRemove.Size()
		n += 1 + l + sovNfn(uint64(l))
	}
	return n
}
func (m *Notification_PodAddNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PodAddNetwork != nil {
		l = m.PodAddNetwork.Size()
		n += 1 + l + sovNfn(uint64(l))
	}
	return n
}
func (m *Notification_PodDelNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PodDelNetwork != nil {
		l = m.PodDelNetwork.Size()
		n += 1 + l + sovNfn(uint64(l))
	}
	return n
}
func (m *ProviderNetworkCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderNwName)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	if m.Vlan != nil {
		l = m.Vlan.Size()
		n += 1 + l + sovNfn(uint64(l))
	}
	if m.Direct != nil {
		l = m.Direct.Size()
		n += 1 + l + sovNfn(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProviderNetworkRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderNwName)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	l = len(m.VlanLogicalIntf)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	l = len(m.DirectProviderIntf)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VlanInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VlanId)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	l = len(m.ProviderIntf)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	l = len(m.LogicalIntf)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderIntf)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RouteData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Dst)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	l = len(m.Gw)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerRouteInsert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	if len(m.Route) > 0 {
		for _, e := range m.Route {
			l = e.Size()
			n += 1 + l + sovNfn(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerRouteRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	if len(m.Route) > 0 {
		for _, e := range m.Route {
			l = e.Size()
			n += 1 + l + sovNfn(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodAddNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	if m.Pod != nil {
		l = m.Pod.Size()
		n += 1 + l + sovNfn(uint64(l))
	}
	if m.Net != nil {
		l = m.Net.Size()
		n += 1 + l + sovNfn(uint64(l))
	}
	if len(m.Route) > 0 {
		for _, e := range m.Route {
			l = e.Size()
			n += 1 + l + sovNfn(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodDelNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	if m.Pod != nil {
		l = m.Pod.Size()
		n += 1 + l + sovNfn(uint64(l))
	}
	if m.Net != nil {
		l = m.Net.Size()
		n += 1 + l + sovNfn(uint64(l))
	}
	if len(m.Route) > 0 {
		for _, e := range m.Route {
			l = e.Size()
			n += 1 + l + sovNfn(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeIntfIpAddress)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	l = len(m.NodeIntfMacAddress)
	if l > 0 {
		n += 1 + l + sovNfn(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNfn(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNfn(x uint64) (n int) {
	return sovNfn(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubscribeContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNfn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNfn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNfn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNfn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CniType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CniType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InSync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InSync{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Notification_InSync{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderNwCreate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProviderNetworkCreate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Notification_ProviderNwCreate{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderNwRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProviderNetworkRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Notification_ProviderNwRemove{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainterRtInsert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ContainerRouteInsert{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Notification_ContainterRtInsert{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainterRtRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ContainerRouteRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Notification_ContainterRtRemove{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAddNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PodAddNetwork{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Notification_PodAddNetwork{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodDelNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PodDelNetwork{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Notification_PodDelNetwork{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNfn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNfn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderNetworkCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNfn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderNetworkCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderNetworkCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderNwName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderNwName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vlan == nil {
				m.Vlan = &VlanInfo{}
			}
			if err := m.Vlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direct", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Direct == nil {
				m.Direct = &DirectInfo{}
			}
			if err := m.Direct.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNfn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNfn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderNetworkRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNfn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderNetworkRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderNetworkRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderNwName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderNwName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanLogicalIntf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VlanLogicalIntf = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectProviderIntf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectProviderIntf = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNfn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNfn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNfn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderIntf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderIntf = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalIntf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicalIntf = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNfn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNfn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNfn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderIntf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderIntf = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNfn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNfn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNfn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dst = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNfn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNfn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerRouteInsert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNfn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerRouteInsert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerRouteInsert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Route = append(m.Route, &RouteData{})
			if err := m.Route[len(m.Route)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNfn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNfn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerRouteRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNfn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerRouteRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerRouteRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Route = append(m.Route, &RouteData{})
			if err := m.Route[len(m.Route)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNfn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNfn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNfn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNfn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNfn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNfn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNfn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNfn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodAddNetwork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNfn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodAddNetwork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodAddNetwork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pod == nil {
				m.Pod = &PodInfo{}
			}
			if err := m.Pod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Net", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Net == nil {
				m.Net = &NetConf{}
			}
			if err := m.Net.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Route = append(m.Route, &RouteData{})
			if err := m.Route[len(m.Route)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNfn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNfn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodDelNetwork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNfn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodDelNetwork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodDelNetwork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pod == nil {
				m.Pod = &PodInfo{}
			}
			if err := m.Pod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Net", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Net == nil {
				m.Net = &NetConf{}
			}
			if err := m.Net.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Route = append(m.Route, &RouteData{})
			if err := m.Route[len(m.Route)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNfn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNfn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InSync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNfn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InSync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InSync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIntfIpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeIntfIpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIntfMacAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNfn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNfn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeIntfMacAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNfn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNfn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNfn(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNfn
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNfn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNfn
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNfn
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNfn
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNfn        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNfn          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNfn = fmt.Errorf("proto: unexpected end of group")
)
