FROM golang:1.17.6 as builder

WORKDIR /workspace

# Copy the Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum
# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN go mod download
COPY cmd cmd
COPY pkg pkg
COPY internal internal
COPY build build
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GO111MODULE=on go build -o build/bin/nfn-operator ./cmd/nfn-operator
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GO111MODULE=on go build -o build/bin/ovn4nfvk8s-cni ./cmd/ovn4nfvk8s-cni
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GO111MODULE=on go build -o build/bin/nfn-agent ./cmd/nfn-agent

FROM ubuntu:18.04

ARG CNI_VERSION=v1.0.1
ENV DEBIAN_FRONTEND=noninteractive 
WORKDIR /
COPY --from=builder /workspace/build/bin/* usr/local/bin/
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y -qq apt-transport-https make curl net-tools iproute2 iptables \
    wget software-properties-common setpriv dpkg-dev netcat jq && \
    rm -rf /var/lib/apt/lists/*

RUN mkdir -p /opt/ovn4nfv-k8s-plugin/dist/ubuntu/deb
RUN bash -xc "\
pushd /opt/ovn4nfv-k8s-plugin/dist/ubuntu/deb; \
wget -q -nv -O- https://api.github.com/repos/akraino-icn/ovs/releases/tags/v2.12.0 2>/dev/null | jq -r '.assets[] | select(.browser_download_url | contains("\""deb"\"")) | .browser_download_url' | wget -i -; \
dpkg-scanpackages . | gzip -c9  > Packages.gz; \
popd; \
"
RUN echo "deb [trusted=yes] file:///opt/ovn4nfv-k8s-plugin/dist/ubuntu/deb ./" | tee -a /etc/apt/sources.list > /dev/null
RUN apt-get update && apt-get install -y -qq ovn-common=2.12.0-1 openvswitch-common=2.12.0-1 openvswitch-switch=2.12.0-1

ENV OPERATOR=/usr/local/bin/nfn-operator \
    AGENT=/usr/local/bin/nfn-agent \
    USER_UID=1001 \
    USER_NAME=nfn-operator

ENV CNI_VERSION=$CNI_VERSION

RUN mkdir -p /opt/cni/bin && \
    curl --insecure --compressed -O -L https://github.com/akraino-icn/plugins/releases/download/$CNI_VERSION/cni-plugins-linux-amd64-$CNI_VERSION.tgz && \
    tar -zxvf cni-plugins-linux-amd64-$CNI_VERSION.tgz -C /opt/cni/bin && \
    rm -rf cni-plugins-linux-amd64-$CNI_VERSION.tgz

ENTRYPOINT ["entrypoint"]
